import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'com.android.library'
apply from: file(rootProject.file('module.gradle'))

android {
    flavorDimensions += "api"

    compileSdkVersion = rootProject.ext.targetSdkVersion
    buildToolsVersion = '33.0.2'
    ndkVersion '25.0.8775105'
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }
    buildFeatures {
        buildConfig true
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    productFlavors {
        configureEach {
            externalNativeBuild {
                cmake {
                    arguments "-DMODULE_NAME:STRING=$moduleLibraryName",
                            "-DAPI=${name.toLowerCase()}"
                }
            }
            buildConfigField("String", "API", "\"$name\"")
        }

        register("Riru") {
            dimension = "api"
            externalNativeBuild {
                cmake {
                    arguments += "-DMODULE_VERSION=$moduleVersionCode"
                    arguments += "-DMODULE_VERSION_NAME:STRING=$moduleVersion"
                    arguments += "-DRIRU_MODULE=true"
                    arguments += "-DRIRU_MODULE_API_VERSION=$moduleRiruApiVersion"
                    arguments += "-DRIRU_MODULE_MIN_API_VERSION=$moduleMinRiruApiVersion"
                }
            }
        }

        register("Zygisk") {
            dimension = "api"
            externalNativeBuild {
                cmake {
                    arguments += "-DMODULE_VERSION=$moduleVersionCode"
                    arguments += "-DMODULE_VERSION_NAME:STRING=$moduleVersion"
                    arguments += "-DRIRU_MODULE_API_VERSION=-1"
                    arguments += "-DRIRU_MODULE_MIN_API_VERSION=-1"
                }
            }
        }
    }
    namespace 'com.kimjio.umamusumelocalify'
}

repositories {
    mavenLocal()
}

dependencies {
    // This is prefab aar which contains "riru.h"
    // If you want to use older versions of AGP,
    // you can copy this file from https://github.com/RikkaApps/Riru/blob/master/riru/src/main/cpp/include_riru/riru.h
    implementation 'dev.rikka.ndk:riru:26.0.0'
}

afterEvaluate {
    android.libraryVariants.forEach { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()
        def buildTypeCapped = variant.buildType.name.capitalize()
        def buildTypeLowered = variant.buildType.name.toLowerCase()
        def flavorCapped = variant.flavorName.capitalize()
        def flavorLowered = variant.flavorName.toLowerCase()

        def zipName = "${flavorLowered}-${magiskModuleId.replace('_', '-')}-${moduleVersion}-${buildTypeLowered}.zip"
        def magiskDir = file("$outDir/magisk_module_${flavorLowered}_${buildTypeLowered}")

        task("prepareMagiskFiles${variantCapped}", type: Sync) {
            dependsOn("assemble$variantCapped")

            def templatePath = "$rootDir/template/magisk_module"

            into magiskDir

            from(templatePath) {
                exclude "riru.sh", "module.prop", 'system.prop', "customize.sh", "service.sh"
            }
            from(templatePath) {
                include 'module.prop'
                expand([
                        id         : "${flavorLowered}_${magiskModuleId}",
                        name       : moduleName,
                        version    : moduleVersion,
                        versionCode: moduleVersionCode.toString(),
                        author     : moduleAuthor,
                        description: "$moduleDescription $flavorCapped version.",
                        updateJson : "${moduleUpdateJson}-${flavorLowered}.json",
                        requirement: flavorLowered == "riru" ? "Requires Riru $moduleMinRiruVersionName or above installed" :
                                flavorLowered == "zygisk" ? "Requires Magisk 24.0+ and Zygisk enabled" : null,
                        api        : flavorCapped
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from(templatePath) {
                include 'system.prop'
                expand([
                        version: moduleVersion,
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from(templatePath) {
                include("customize.sh")
                filter(ReplaceTokens.class, tokens: [
                        "FLAVOR"         : flavorLowered,
                        "MODULE_LIB_NAME": moduleLibraryName
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from(templatePath) {
                include("service.sh")
                filter(ReplaceTokens.class, tokens: [
                        "API"            : flavorLowered,
                        "MODULE_ID"      : magiskModuleId,
                        "MODULE_LIB_NAME": moduleLibraryName
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            if (flavorLowered == "riru") {
                from(templatePath) {
                    include "riru.sh"
                    filter(ReplaceTokens.class, tokens: [
                            "MODULE_LIB_NAME"                  : moduleLibraryName,
                            "RIRU_MODULE_API_VERSION"          : moduleRiruApiVersion.toString(),
                            "RIRU_MODULE_MIN_API_VERSION"      : moduleMinRiruApiVersion.toString(),
                            "RIRU_MODULE_MIN_RIRU_VERSION_NAME": moduleMinRiruVersionName,
                            "RIRU_MODULE_DEBUG"                : buildTypeLowered == "debug" ? "true" : "false"
                    ])
                    filter(FixCrLfFilter.class,
                            eol: FixCrLfFilter.CrLf.newInstance("lf"))
                }
            }
            from("$buildDir/intermediates/stripped_native_libs/$variantLowered/out/lib") {
                into 'lib'
            }

            from("$buildDir/intermediates/javac/$variantLowered/") {
                exclude 'classes'
                doFirst {
                    def sdkDir = project.android.sdkDirectory;
                    def buildToolVersion = project.android.buildToolsVersion;
                    exec {
                        workingDir "$buildDir/intermediates/javac/$variantLowered"
                        commandLine "$sdkDir/build-tools/$buildToolVersion/d8${System.properties['os.name'].toLowerCase().contains('windows'.toLowerCase()) ? ".bat" : ''}",
                                "$buildDir/intermediates/javac/$variantLowered/classes/com/kimjio/umamusumelocalify/Hooker.class",
                                "$buildDir/intermediates/javac/$variantLowered/classes/com/kimjio/umamusumelocalify/MethodCallback.class"
                    }
                }
            }
        }

        task("zip${variantCapped}", type: Zip) {
            dependsOn("prepareMagiskFiles${variantCapped}")
            from magiskDir
            archiveFileName = zipName
            destinationDirectory = outDir
        }

        task("push${variantCapped}", type: Exec) {
            dependsOn("zip${variantCapped}")
            workingDir outDir
            commandLine android.adbExecutable, "push", zipName, "/data/local/tmp/"
        }

        task("flash${variantCapped}", type: Exec) {
            dependsOn("push${variantCapped}")
            commandLine android.adbExecutable, "shell", "su", "-c",
                    "magisk --install-module /data/local/tmp/${zipName}"
        }

        task("flashAndReboot${variantCapped}", type: Exec) {
            dependsOn("flash${variantCapped}")
            commandLine android.adbExecutable, "shell", "reboot"
        }

        variant.assembleProvider.get().finalizedBy("zip${variantCapped}")
    }
}
